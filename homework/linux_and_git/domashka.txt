Linux
1. mkdir linux_lecture && touch notes.txt
2. mv notes.txt linux_lecture
3. ls -l linux_lecture
4. ls -rl ~
5. mv linux_lecture/notes.txt linux_lecture/new_notes.txt
6. rm linux_lecture/new_notes.txt linux_lecture/notes.txt
7. touch -t 202001011615 homework.sh
8. find *.txt
9. mv *.txt linux_lecture
10. echo "echo 'linux lecture'" > homework.sh
11. cat homework.sh
12. chmod o-wx homework.sh && cat homework.sh (owner current user)
13. chmod o+rwx homework.sh
13a. sh homework.sh // or ./homework.sh
14. open homework.sh //and then write by hands, or seq 1 10 > homework.sh
15. head -7 homework.sh
16. echo 'ls' > notes.sh | chmod u+x notes.sh
17. ./notes.sh //or sh homework.sh 

GIT
1. mkdir cursor_git
2. cd cursor_git
3. touch first.py
4. git init .
   git add first.py
   (git branch -M main)
   git remote add origin git@github.com:nkrutoholo/cursor_git.git
5. git commit -m "adding first.py"
6. git log // check out our commit
7. touch second.py
8. git add second.py
9. git commit -m "adding second.py"
10. rm first.py
11. git add .
12. git commit -m "removing first.py"
13. git log // check out our commit
14. git push
15. git branch first
16. git branch second
17. echo "print('Hello')" > second.py
18. git stash && git checkout first
19. git checkout master && git stash pop
20. git add .
21. git commit -m "Changing second.py"
22. git push -u origin master
23. git checkout first
24. echo 'print("Cursor")' > second.py
25. git add .
26. git commit -m "Changing second.py"
27. git push -u origin first
28. git checkout master
29. git merge first
30. git merge second
30. open second.py // and resolve conflict by hands, delete conflict markers <<<<<<<, =======, >>>>>>> and names of branches
    git add .
    git commit -m "Resolved merge conflict"
    git push
